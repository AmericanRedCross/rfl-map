{{#if user}}

<!-- Navigation -->
<button id="menu-toggle" type="button" class="button secondary toggle"><i class="fa fa-bars"></i></button>
<nav id="sidebar-wrapper" class="active">
    <ul id="side-menu" class="sidebar-nav metismenu">
        <button id="menu-close" type="button" class="button secondary toggle pull-right"><i class="fa fa-times"></i></button>
        <li class="sidebar-brand">
            <a href="#" >RFL</a>
        </li>
        <li class="second-level-sector" style="border-top:1px solid #6d6e70;">
            <span>RFL in the Regions</span>
        </li>
        
        <li>
            <a href="#" id="region-leads" class="toggle__region-choropleth" onclick = toggleRegion(this); >
              <i class="fa fa-map-o" style="visibility:hidden;"></i> &nbsp; Region Leads
            </a>
        </li>
        <li>
            <a href="#" id="region-top30" class="toggle__region-choropleth" onclick = toggleRegion(this); >
              <i class="fa fa-map-o" style="visibility:hidden;"></i> &nbsp; Top 30
            </a>
        </li>
        <li>
            <a href="#" id="region-instructors" class="toggle__region-choropleth" onclick = toggleRegion(this); >
              <i class="fa fa-map-o" style="visibility:hidden;"></i> &nbsp; Mentors & Instructors
            </a>
        </li>

        <li class="second-level-sector" style="border-top:1px solid #6d6e70;">
            <span>Location Layers</span>
        </li>
        <li>
            <a href="#" id="layer-phoneservices" class="active" onclick = toggleLayer(this); ><i class="fa fa-fw fa-map-marker"></i> &nbsp; RFL phone services</a>
        </li>
        <li>
            <a href="#" id="layer-orraffiliates" class="active" onclick = toggleLayer(this); ><i class="fa fa-fw fa-map-marker"></i> &nbsp; ORR affiliates</a>
        </li>
        <li>
            <a href="#" id="layer-icedetentionfacilities" class="active" onclick = toggleLayer(this); ><i class="fa fa-fw fa-map-marker"></i> &nbsp; ICE detention facilities</a>
        </li>
        
        <li class="second-level-sector" style="border-top:1px solid #6d6e70;">
            <span>Foreign-born Populations</span>
        </li>
        <li>
            <a href="#" id="layer__foreign" class="" onclick = toggleForeign(this); ><i class="fa fa-fw fa-map-marker" style="visibility:hidden;" ></i> &nbsp; Census tracts</a>
        </li>
        
        <li>
            <a href="#">Set countries of origin <i class="fa nav-arrow nav-float-right"></i></a>
            <ul class="second-level">
                <li>
                    <a href="#" data-foreign="Americas_LatinAmerica_CentralAm" class="toggle__foreign active" onclick = toggleForeign(this); >
                      <i class="fa fa-map-o"></i> &nbsp; Central America
                    </a>
                </li>
                <li>
                    <a href="#" data-foreign="Americas_LatinAmerica_SouthAmer" class="toggle__foreign" onclick = toggleForeign(this); >
                      <i class="fa fa-map-o" style="visibility:hidden;"></i> &nbsp; South America
                    </a>
                </li>
                <li style="border-top:1px solid #6d6e70;">
                    <a href="#" data-foreign="Americas_LatinAmerica_Central_1" class="toggle__foreign" onclick = toggleForeign(this); >
                      <i class="fa fa-map-o" style="visibility:hidden;"></i> &nbsp; Mexico
                    </a>
                </li>
                <li>
                    <a href="#" data-foreign="Americas_LatinAmerica_Central_4" class="toggle__foreign" onclick = toggleForeign(this); >
                      <i class="fa fa-map-o" style="visibility:hidden;"></i> &nbsp; El Salvador
                    </a>
                </li>
                <li>
                    <a href="#" data-foreign="Americas_LatinAmerica_Central_5" class="toggle__foreign" onclick = toggleForeign(this); >
                      <i class="fa fa-map-o" style="visibility:hidden;"></i> &nbsp; Guatemala
                    </a>
                </li>
                <li>
                    <a href="#" data-foreign="Americas_LatinAmerica_Central_6" class="toggle__foreign" onclick = toggleForeign(this); >
                      <i class="fa fa-map-o" style="visibility:hidden;"></i> &nbsp; Honduras
                    </a>
                </li>
                <li>
                    <a href="#" data-foreign="Americas_LatinAmerica_Central_10" class="toggle__foreign" onclick = toggleForeign(this); >
                      <i class="fa fa-map-o" style="visibility:hidden;"></i> &nbsp; Venezuela
                    </a>
                </li>
            </ul>
        </li>
        
        <li>
            <a href="#">Set threshold <i class="fa nav-arrow nav-float-right"></i></a>
            <ul class="second-level">
                <li>
                    <a href="#" data-foreignThreshold="250" class="toggle__foreignThreshold" onclick = toggleForeignThreshold(this); >
                      <i class="fa fa-check" style="visibility:hidden;"></i> &nbsp; >250
                    </a>
                </li>
                <li>
                    <a href="#" data-foreignThreshold="500" class="toggle__foreignThreshold" onclick = toggleForeignThreshold(this); >
                      <i class="fa fa-check" style="visibility:hidden;"></i> &nbsp; >500
                    </a>
                </li>
                <li>
                    <a href="#" data-foreignThreshold="1000" class="toggle__foreignThreshold" onclick = toggleForeignThreshold(this); >
                      <i class="fa fa-check" style="visibility:hidden;"></i> &nbsp; >1,000
                    </a>
                </li>
                <li>
                    <a href="#" data-foreignThreshold="2500" class="toggle__foreignThreshold active" onclick = toggleForeignThreshold(this); >
                      <i class="fa fa-check" style=""></i> &nbsp; >2,500
                    </a>
                </li>
                <li>
                    <a href="#" data-foreignThreshold="5000" class="toggle__foreignThreshold" onclick = toggleForeignThreshold(this); >
                      <i class="fa fa-check" style="visibility:hidden;"></i> &nbsp; >5,000
                    </a>
                </li>
            </ul>
        </li>
        

        <li style="border-top:1px solid #6d6e70;">
          <form id="form-logout" style="display:none;" action="{{opts.nginxlocation}}logout" method="POST"></form>
          <a href="#" onclick = document.getElementById('form-logout').submit(); >{{user.user}}
            <span class="logout nav-float-right">Logout &nbsp;<i class="fa fa-sign-out"></i></span>
          </a>
        </li>
        {{#eq user.permissions "admin"}}
          <li>
            <a href="{{opts.nginxlocation}}admin/users"><i class="fa fa-fw fa-user"></i> &nbsp; Manage users</a>
          </li>
        {{/eq}}
    </ul>
</nav>

<div id="tooltip"></div>

<div class="grid-x">
<div class="cell">
  
<div id="rfl-map"></div>

</div>
</div>

<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/metisMenu/2.6.2/metisMenu.min.css">
<link rel="stylesheet" href="//unpkg.com/leaflet@1.0.3/dist/leaflet.css" />
<script src="//unpkg.com/leaflet@1.0.3/dist/leaflet.js"></script>
<script src="//unpkg.com/esri-leaflet/dist/esri-leaflet.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/d3/4.6.0/d3.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/metisMenu/2.6.2/metisMenu.min.js"></script>
<script src="{{opts.nginxlocation}}js/topojson.v2.min.js"></script>
<script>

var regions, tracts;

var commas = d3.format(",");

var height = $(window).height();
$('#rfl-map').height(height);
$(window).resize(function(){
  height = $(window).height();
  $('#rfl-map').height(height);
})

// create basic leaflet map
// ========================
// tile layer for base map
var hotUrl = 'http://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',
  hotAttribution = '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, Tiles from <a href="http://hot.openstreetmap.org/" target="_blank">H.O.T.</a>',
  hotLayer = L.tileLayer(hotUrl, {attribution: hotAttribution});
// initialize map w options
var map = L.map('rfl-map', {
  layers: [hotLayer],
  center: new L.LatLng(30.587,-100.837),
  zoom: 6,
  minZoom: 4
});

L.svg().addTo(map);
// pick up the SVG from the map object
var svg = d3.select('#rfl-map').select('svg');
var geoGroup = svg.append('g').attr('id', 'geo');
var mapped;

function projectPoint(x, y){
  var point = map.latLngToLayerPoint(new L.LatLng(y, x));
  this.stream.point(point.x, point.y);
}

var transform = d3.geoTransform({point: projectPoint});
var path = d3.geoPath().projection(transform);


var phoneservices = L.featureGroup();
map.addLayer(phoneservices);
var detentionfacilities = L.featureGroup();
map.addLayer(detentionfacilities);
var orraffiliates = L.featureGroup();
map.addLayer(orraffiliates);

var legend = L.control({position: 'bottomleft'});
legend.onAdd = function (map) {
    var div = L.DomUtil.create('div', 'info legend');
    div.innerHTML = "<div id='legend__choropleth' class='clearfix'></div> <div id='legend__foreign'></div>"
    return div;
};
legend.addTo(map);


var phoneIcon = L.icon({
  iconUrl: '{{opts.nginxlocation}}img/marker-phone.svg',
  iconSize: [30, 30],
  iconAnchor: [15, 30] 
  });
var detentionIcon = L.icon({
  iconUrl: '{{opts.nginxlocation}}img/marker-detention.svg',
  iconSize: [30, 30],
  iconAnchor: [15, 30] 
  });
var affiliateIcon = L.icon({
  iconUrl: '{{opts.nginxlocation}}img/marker-affiliate.svg',
  iconSize: [30, 30],
  iconAnchor: [15, 30] 
  });

// handles tooltip text for mouse events on the d3 drawn regions
function handleMouseover(d,i) {
  var tooltipText = "<small><span class='region-name'>" + d.properties.Region + "</span><br>";
  tooltipText += "Case & activity rank: " + d.properties["top30"] + "<br>";
  tooltipText += "&nbsp; &nbsp; Activity volume: " + d.properties["activity-volume"] + "<br>";
  tooltipText += "&nbsp; &nbsp; Case volume: " + d.properties["case-volume"] + "<br>";
  tooltipText += "Total instructors & mentors: " + d.properties["instructors-and-mentors"] + "<br>";
  tooltipText += "&nbsp; &nbsp; Instructors: " + d.properties["instructors"] + "<br>";
  tooltipText += "&nbsp; &nbsp; Master instructors: " + d.properties["master-instructors"] + "<br>";
  tooltipText += "&nbsp; &nbsp; Mentors: " + d.properties["mentors"] + "<br>";
  tooltipText += "Leads: " + d.properties["leads"] + "<br>";
  tooltipText += "</small>";
  $('#tooltip').html(tooltipText);
}
function handleMouseout() {
  $('#tooltip').empty();
}

window.onload = function() {

  d3.queue()
    .defer(d3.json, '{{opts.nginxlocation}}api/rfl')
    .defer(d3.json, '{{opts.nginxlocation}}data/regions.json')
    .defer(d3.json, '{{opts.nginxlocation}}api/phoneservices')
    .defer(d3.json, '{{opts.nginxlocation}}api/icedetentionfacilities')
    .defer(d3.csv, '{{opts.nginxlocation}}data/orr-affiliates.csv')
    .await(buildPage);
}

var buildPage = function(error, rfl, geo, phones, detentions, affiliates) {
  regions = topojson.feature(geo, geo.objects.regions).features;
  $(rfl).each(function(a, regionRfl) {
    $(regions).each(function(b, regionGeo) {
      if(regionGeo.properties.RCODE === regionRfl.region) {
        regionGeo.properties["leads"] = +regionRfl["leads"];
        regionGeo.properties["case-volume"] = +regionRfl["case-volume"];
        regionGeo.properties["activity-volume"] = +regionRfl["activity-volume"];
        regionGeo.properties["top30"] = +regionRfl["top30"];
        regionGeo.properties["instructors"] = +regionRfl["instructors"];
        regionGeo.properties["mentors"] = +regionRfl["mentors"];
        regionGeo.properties["master-instructors"] = +regionRfl["master-instructors"];
        regionGeo.properties["instructors-and-mentors"] = +regionRfl["instructors"] + +regionRfl["mentors"] + +regionRfl["master-instructors"];
      }
    })
  })
  
  // Red Cross regions
  mapped = geoGroup.selectAll("path")
    .data(regions, function(d){ return d.properties.RCODE; })
    .enter().append("path")
    .attr("class", "region region__default")
    .attr("d", path)
    .on("mouseover", handleMouseover)
    .on("mouseout", handleMouseout)
    
  // phone services         
  for (var i = 0; i < phones.length; i++) {
    var phone = L.marker([phones[i].lat, phones[i].lng], {icon: phoneIcon});
    phone.bindPopup(phones[i].name)
    phoneservices.addLayer(phone);
  }
  // ice detention facilities        
  for (var i = 0; i < detentions.length; i++) {
    var detention = L.marker([detentions[i].lat, detentions[i].lng], {icon: detentionIcon});
    detention.bindPopup(detentions[i].name)
    detentionfacilities.addLayer(detention);
  }
  // orr affiliate        
  for (var i = 0; i < affiliates.length; i++) {
    var affiliate = L.marker([affiliates[i].lat, affiliates[i].lng], {icon: affiliateIcon});
    var affiliatePopup = "<b>" + affiliates[i].name + "</b><br>" +
     "<small>" + affiliates[i].addr + ", " + affiliates[i].city + ", " + affiliates[i].state + "<br>" + affiliates[i].phn + "</small>";
    affiliate.bindPopup(affiliatePopup)
    orraffiliates.addLayer(affiliate);
  }
    
  updatePath = function(){ mapped.attr("d", path); }
  map.on('zoom move viewreset', updatePath);
  updatePath();
  
  $("#region-top30").click();
  
}

function toggleLayer(toggle) {
  var toggleId = $(toggle).attr('id');
  var changedLayer;
  if(toggleId == "layer-phoneservices") {
    changedLayer = phoneservices;
  } else if (toggleId == "layer-icedetentionfacilities") {
    changedLayer = detentionfacilities;
  } else if (toggleId == "layer-orraffiliates") {
    changedLayer = orraffiliates;
  } else {
    console.log("error")
  }
  
  if($(toggle).hasClass('active')){
    $(toggle).removeClass('active');
    $(toggle).find('.fa').css('visibility','hidden')
    map.removeLayer(changedLayer)
  } else {
    $(toggle).addClass('active');
    $(toggle).find('.fa').css('visibility','visible')
    map.addLayer(changedLayer)
  }

}

function toggleForeign(toggle) {
  
  if($(toggle).hasClass('active')){    
    $(toggle).removeClass('active');
    $(toggle).find('.fa').css('visibility','hidden');  
  } else { 
    $(toggle).addClass('active');
    $(toggle).find('.fa').css('visibility','visible');
  }
  
  drawForeign();
}

function toggleForeignThreshold(toggle) {
  
  $(".toggle__foreignThreshold").each(function(i, item){
    $(item).removeClass('active');
    $(item).find('.fa').css('visibility','hidden');
  })
  $(toggle).addClass('active');
  $(toggle).find('.fa').css('visibility','visible');
  
  drawForeign();
}


function drawForeign() {
  
  if(map.hasLayer(tracts)) {
    map.removeLayer(tracts);
  }
  d3.select("#legend__foreign").html('');
  
  if($("#layer__foreign").hasClass('active')){
    
    var thresholdValue;
    var placesKeys = [];
    var placesText = [];
    
    var popupTemplate = "<b>{Geography}</b><br>"; 
    $(".toggle__foreign").each(function(i, item){
      if($(item).hasClass('active')) {
        placesKeys.push($(item).attr('data-foreign'));
        placesText.push($(item).text().trim());
        popupTemplate += $(item).text().trim() + ": {" + $(item).attr('data-foreign') + "} <br>";
      }
    })
    
    $(".toggle__foreignThreshold").each(function(i, item){
      if($(item).hasClass('active')) {
        thresholdValue = $(item).attr('data-foreignThreshold');
      }
    })
    
    var query = placesKeys.join(" > " + thresholdValue + " OR ") + " > " + thresholdValue;
    
    var tractColor = "#888"
    tracts = L.esri.featureLayer({
      url: "https://services.arcgis.com/pGfbNJoYypmNq86F/arcgis/rest/services/RFL_Place_of_Birth_by_Tract/FeatureServer/0",
      style: function () {
        return { color: tractColor, weight: 2 };
      },
      where: query
    }).addTo(map);
    
    // change the label in the lower right
    d3.select("#legend__foreign").style("max-width", "225px");
    var legendHtml = "<div>";
    legendHtml += '<span style="display:inline-block;height:10px;width:10px;opacity:0.2;border-radius:1px;border:1px solid #000;background-color:' + tractColor + '"></span> &nbsp; ';
    legendHtml+= placesText.join(" OR ") + " > " + commas(thresholdValue) + " persons" + "</div>";
    d3.select("#legend__foreign").html(legendHtml);
    
    tracts.bindPopup(function(e){
      return L.Util.template(popupTemplate, e.feature.properties)
    });
    
  } else {
    
  }
  
  
  
}


function toggleRegion(toggle) {
  
  var toggleId = $(toggle).attr('id');
  var dataKey, legendTitle, myColorScale;

  $(".toggle__region-choropleth").find('.fa').css('visibility','hidden');


  if(toggleId == "region-leads") {
    dataKey = "leads";
    legendTitle = "# of Region Leads";
    myColorScale = ["#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#084594"]
  } else if (toggleId == "region-top30") {
    dataKey = "top30";
    legendTitle = "Rank of top 30 Regions by case & activity volume";
    myColorScale = ["#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#99000d"];
    myColorScale = myColorScale.reverse();
    // myColorScale = ["#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#99000d"];
  } else if (toggleId == "region-instructors") {
    dataKey = "instructors-and-mentors";
    legendTitle = "Total # of Instructors, Master Instructors, and Mentors";
    myColorScale = ["#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#91003f"]
  } else {
    console.log("error")
  }
  
  if($(toggle).hasClass('active')){
    
    $(toggle).removeClass('active');
    $(toggle).find('.fa').css('visibility','hidden');
    
    d3.select("#legend__choropleth").html('');
    
    mapped.each(function(d,i) {
      d3.select(this)
        .style("fill", function(d){ return null; });
    });
    
  } else {
    $('.toggle__region-choropleth').removeClass('active');
    $(toggle).addClass('active');
    $(toggle).find('.fa').css('visibility','visible');
    
    regionRange = [
      d3.min(d3.values(regions), function(d) { return d.properties[dataKey]; }),
      d3.max(d3.values(regions), function(d) { return d.properties[dataKey]; })  
    ]
    if(regionRange[0] == 0) { regionRange[0] = 1; }
    // color scale
    quantize = d3.scaleQuantize().domain([regionRange[0], regionRange[1]]).range(myColorScale);
    // change the label in the lower left
    d3.select("#legend__choropleth").style("max-width", "225px");
    var legendHtml ="<div class='legend-title'>" + legendTitle + "</div><div class='legend-color'>";
    var spanWidth = 200 / myColorScale.length; 
    for(var i=0;i<myColorScale.length;i++) {
      legendHtml += '<span style="display:inline-block;height:10px;width:' + spanWidth + 'px;background-color:' + myColorScale[i] + '"></span>'
    }
    legendHtml += "</div>"
    legendHtml += "<div><div class='legend-min'>" + regionRange[0] + "</div><div class='legend-max'>" + regionRange[1] + "</div></div>"
    d3.select("#legend__choropleth").html(legendHtml);

    mapped.each(function(d,i) {
      if(d.properties[dataKey] !== null && d.properties[dataKey] > 0) {
        d3.select(this).style("fill", function(d){
          return quantize(d.properties[dataKey]);
        });
      } else {
        d3.select(this)
          .style("fill", function(d){ return null; });
      }
    });
    
  }
  
}

// # closes the sidebar menu
$("#menu-close").click(function(e) {
    e.preventDefault();
    $("#sidebar-wrapper").toggleClass("active");
});
// # opens the sidebar menu
$("#menu-toggle").click(function(e) {
    e.preventDefault();
    $("#sidebar-wrapper").toggleClass("active");
});
// # creates the dropdowns in the sidebar menu
$(function() {
    $('#side-menu').metisMenu();
});

// tooltip follows cursor
$(document).ready(function() {
  $('body').mouseover(function(e) {
    //Set the X and Y axis of the tooltip
    $('#tooltip').css('top', e.pageY + 10 );
    $('#tooltip').css('left', e.pageX + 20 );
  }).mousemove(function(e) {
    //Keep changing the X and Y axis for the tooltip, thus, the tooltip move along with the mouse
    $("#tooltip").css({top:(e.pageY+15)+"px",left:(e.pageX+20)+"px"});
  });
});

</script>



{{else}}

<div class="grid-x">
  <div class="cell small-6 small-offset-3 medium-4 medium-offset-4">
  	<form action="{{opts.nginxlocation}}login" method="POST">
      <label> User
        <input type="text" name="user" id="login-user" placeholder="...">
      </label>
      <label> Password
        <input type="password" name="password" id="login-password" placeholder="...">
      </label>
      <button type="submit" value="submit" class="button">Log In</button>
  	</form>
  </div>
</div>

{{/if}}